module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output [23:0] out_bytes,
    output done); //

    parameter byte1=1, byte2=2, byte3=3, Done=0;
    reg[1:0] state, next_state, prev;
    reg[7:0] inp;
    reg [23:0] out;
    
    // FSM from fsm_ps2
    always @(*)    begin
        case(state)
            byte1: next_state <= in[3]? byte2:byte1;
            byte2: next_state <= byte3;
            byte3: next_state <= Done;
            Done : next_state <= in[3]? byte2:byte1;
        endcase
    end
    
    always @(posedge clk)  begin
        if(reset)    begin
            state <= byte1;
            prev <= state;
            inp <= 8'd0;
        end
        else   begin
            state <= next_state;
            prev <= state;
            inp <= in;
        end
     end
    
    // New: Datapath to store incoming bytes.
    always @(*)   begin
        case(state)
            byte1: begin
                if(in[3])  out[23:16] = in; 
            end
            byte2: begin
                if(prev==Done && inp[3]==1)   begin
                    out[23:16] = inp;
                    out[15:8] = in;
                end
                
                else  out[15:8] = in;
            end
            byte3: out[7:0] = in;
            Done: begin
                ;
            end
        endcase
    end

    assign out_bytes = (state==Done)? out:8'bx;
    assign done = (state==Done);
    
endmodule
